name: CI Pipeline

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

jobs:
  lint:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black flake8 isort mypy

      - name: Check code formatting (Black)
        run: black --check src/ tests/

      - name: Check import sorting (isort)
        run: isort --check-only src/ tests/

      - name: Lint with flake8
        run: |
          # Stop build if there are syntax errors or undefined names
          flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
          # Check for other issues (warnings only)
          flake8 src/ --count --max-complexity=10 --max-line-length=127 --statistics

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Check for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: [lint]

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      qdrant:
        image: qdrant/qdrant:latest
        ports:
          - 6333:6333

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio

      - name: Wait for Qdrant to be ready
        run: |
          timeout 60 bash -c 'until nc -z localhost 6333; do echo "Waiting for Qdrant..."; sleep 2; done'
          echo "Qdrant is ready!"

      - name: Run unit tests
        env:
          QDRANT_HOST: localhost
          QDRANT_PORT: 6333
          REDIS_HOST: localhost
          REDIS_PORT: 6379
        run: |
          pytest tests/unit/ -v --cov=src --cov-report=xml --cov-report=term

      - name: Run integration tests
        env:
          QDRANT_HOST: localhost
          QDRANT_PORT: 6333
          REDIS_HOST: localhost
          REDIS_PORT: 6379
        run: |
          pytest tests/integration/ -v

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

      - name: Check coverage threshold
        run: |
          coverage report --fail-under=80

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'pull_request'

    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: false
          tags: recommendation-api:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

  pr-validation:
    name: PR Validation
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: [lint, security, test, docker-build]

    steps:
      - name: PR is ready to merge
        run: |
          echo "âœ… All checks passed! PR is ready for review."
